---
description: 
globs: 
alwaysApply: true
---
# ルールについて

## 🎯 継続的ルール学習・更新システム

### 基本原則
このプロジェクトでは、開発を進める中でユーザーからの指示や要求を通じて、プロジェクト固有のルールやパターンを継続的に学習し、ドキュメント化していきます。

### 🔄 積極的なルール提案システム

#### 1. **プロアクティブなルール提案**
以下のような場面で積極的にルール化を提案・実行します：

**即座にルール化すべき場面**：
- ユーザーが「こうしてください」「これは避けて」などの指示を出した時
- アーキテクチャ違反や設計原則に反する実装を指摘された時  
- プロジェクト固有の制約や慣習を発見した時
- 同じパターンが2回以上発生した時
- ユーザーが「他でもこうしている？」と質問した時

**積極的に提案すべき場面**：
- 実装方法に複数の選択肢がある時
- 既存コードとの一貫性に疑問がある時
- 新しい技術や手法を導入する時
- パフォーマンスやセキュリティに関わる決定をする時
- 開発効率に影響する作業パターンを発見した時

#### 2. ルール抽出の対象（従来）
以下のような場面で新しいルールを抽出・言語化します：
- ユーザーが特定の開発手法や方針を指示した時
- 繰り返し発生するパターンや要求を発見した時
- プロジェクト固有の制約や要件が明確になった時
- コーディングスタイルや設計パターンの指針を受けた時
- 開発プロセスやワークフローの改善指示を受けた時

#### 3. **積極的な提案フレーズ集**

開発中に以下のようなフレーズで積極的にルール化を提案します：

**ルール化提案のフレーズ**：
- 「この実装パターンは他でも使えそうなので、ルール化しておきましょうか？」
- 「今回の制約は他の機能でも適用されそうですが、ルールに追加しますか？」
- 「このアーキテクチャ判断は重要なので、設計ルールに記録しておきます」
- 「同様のパターンを見つけました。統一的なルールを作成しましょう」
- 「この開発手順は効率的なので、ワークフローに組み込みませんか？」

**即座にルール化宣言のフレーズ**：
- 「📋 この指示をルール化します：[内容]」
- 「🔧 重要な制約なので、ルールファイルに追加しました」
- 「⚠️ アーキテクチャ違反を防ぐため、ルール化しました」
- 「🎯 このパターンは再利用性が高いので、ルールに記録しました」

#### 4. ルールファイルの管理
- **新しいルール**: 該当するカテゴリのルールファイルを新規作成
- **既存ルール**: 関連するルールファイルを更新
- **ルールの矛盾**: ユーザーに確認を取り、適切に更新

#### 3. ルールファイルの命名規則
```
.cursor/rules/
├── project-structure.mdc     # プロジェクト構造
├── development-workflow.mdc  # 開発ワークフロー
├── coding-standards.mdc      # コーディング規約
├── database-rules.mdc        # データベース設計ルール
├── api-guidelines.mdc        # API設計ガイドライン
├── testing-rules.mdc         # テスト方針
├── deployment-rules.mdc      # デプロイメント規則
└── ui-ux-guidelines.mdc      # UI/UX設計指針
```

#### 4. ルールの記録タイミング
- **即座に記録**: 明確な指示やルールを受けた時点で即座に記録
- **作業完了後**: 一連の作業が完了した後に、そこから得られたパターンを記録
- **定期的な見直し**: 既存ルールの妥当性を確認し、必要に応じて更新

#### 5. ルールの構造化
各ルールファイルは以下の構造で記録します：
```markdown
# このファイルが読み込まれたら「<ファイル名.mdc>を読み込みました」と必ずユーザーに伝えてください

# [ルールカテゴリ名]

## 概要
このルールの目的と適用範囲

## 具体的なルール

### ルール1: [ルール名]
- **適用場面**: いつ適用するか
- **詳細**: 具体的な内容
- **例**: 実例やコードサンプル
- **理由**: なぜこのルールが必要か

### ルール2: [ルール名]
...
```

#### 6. ルールの活用
- 新規開発時にルールを参照して一貫性を保つ
- 既存コードの改善時にルールに基づいた修正を行う
- ユーザーからの指示がルールと矛盾する場合は確認を取る

### 🎯 実行方針（強化版）

#### 基本方針
1. **超プロアクティブ**: ユーザーから明示的に指示されなくても、パターンを見つけたら積極的にルール化
2. **即時対応**: 重要な指示や制約は会話中に即座にルール化
3. **継続的**: 開発を進める中で常にルールの更新・改善を行う
4. **実用的**: 実際の開発で役立つ具体的なルールを記録
5. **一貫性**: プロジェクト全体で一貫したルールを維持

#### 強化された行動指針
1. **質問への回答時**: 調査結果から新しいルールを抽出し、提案
2. **実装提案時**: アーキテクチャ選択の理由をルール化
3. **エラー修正時**: 再発防止のためのルールを作成
4. **コードレビュー時**: 発見したパターンを積極的にルール化
5. **新機能開発時**: 設計判断をルールとして記録

#### ルール化の優先度
**最高優先度**（即座に実行）：
- セキュリティに関わる制約
- アーキテクチャ違反の防止
- データ整合性に関わるルール
- プロジェクト固有の技術制約

**高優先度**（提案後に実行）：
- 開発効率向上のパターン
- コーディング規約
- テスト戦略
- デプロイメント手順

**中優先度**（ユーザー確認後）：
- UI/UX設計指針
- パフォーマンス最適化
- 運用・保守に関するルール

### 📝 ルール更新の報告（強化版）

#### 即座に実行する場合
```
🔧 重要な制約を発見したため、ルールを即座に作成しました：
📋 ルール作成: [ファイル名]
- 追加内容: [具体的なルール内容]
- 適用理由: [なぜこのルールが必要か]
- 影響範囲: [どの開発作業に影響するか]
```

#### 提案する場合
```
💡 以下のルール化を提案します：
📋 提案ルール: [ルール内容]
- 対象ファイル: [作成/更新するファイル名]
- 期待効果: [このルールによる改善点]
- 実装しますか？
```

#### 更新報告（従来）
```
📋 ルール更新: [ファイル名]
- 新規追加: [追加したルール]
- 更新: [更新したルール]
- 理由: [更新理由]
```

#### 自動検出・提案パターン
以下のような場面で自動的にルール化を検出・提案：
- 同じ質問が2回目に出た時
- アーキテクチャ違反を指摘された時
- 「他でもやっている？」という質問を受けた時
- 新しい制約や慣習を発見した時
- 効率的な開発パターンを見つけた時

### 🚀 継続的改善システム
このシステムにより、プロジェクトの知識を蓄積し、開発効率を継続的に向上させていきます。

**改善サイクル**：
1. 開発作業中にパターンを発見
2. 即座にルール化を検討・提案
3. ユーザーフィードバックを反映
4. ルールを継続的に改善・更新
5. 次回の開発作業でルールを活用
