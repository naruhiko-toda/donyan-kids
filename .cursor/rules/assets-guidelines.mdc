---
alwaysApply: true
---

# このファイルが読み込まれたら「assets-guidelines.mdcを読み込みました」と必ずユーザーに伝えてください

# 画像アセット追加運用ルール

## 概要
本プロジェクトにおける画像（背景画像など）の追加・管理・運用手順を定義します。ローカル/リモートの両方に対応し、`src/masterdata/images.json` による順序制御を標準化します。

## 具体的なルール

### ルール1: 保存場所（ローカル画像）
- **適用場面**: リポジトリに同梱する静的画像を追加する時
- **詳細**: 画像は `assets/images/` 配下に保存する
- **例**: `assets/images/animals/cat-01.png`
- **理由**: Expo バンドルに含め、オフラインでも確実に表示できるため

### ルール2: ファイル形式・解像度・容量
- **適用場面**: 新規画像の作成・書き出し時
- **詳細**:
  - 形式は PNG を推奨（透過可）。写真は JPEG でも可
  - 縦画面前提のため、推奨解像度は 1080×1920 以上（9:16 目安）
  - 容量は 1MB 未満を目標（圧縮や最適化を実施）
- **理由**: 画質・性能・ダウンロードサイズのバランス確保

### ルール3: ファイル命名規約
- **適用場面**: `assets/images/` にファイル追加時
- **詳細**: 小文字-kebab-case、カテゴリ/識別子/番号で命名
  - 例: `animals/cat-01.png`, `nature/forest-02.png`
- **理由**: 一貫性・可読性・将来の自動処理のしやすさ

### ルール4: ローカル画像の解決マップ登録
- **適用場面**: ローカル画像をマスターに登録する時
- **詳細**:
  - `src/masterdata/imageAssets.ts` にキーと `require()` のマッピングを追加
  - キーは `images.json` の `path` に記述する識別子
  - 例:
    ```ts
    export const imageAssets = {
      "animals/cat-01": require("../../assets/images/animals/cat-01.png"),
      "nature/forest-02": require("../../assets/images/nature/forest-02.png"),
    };
    ```
- **理由**: Expo のバンドラ仕様上、`require` はリテラルである必要があるため（静的解析用）

### ルール5: マスターデータ（images.json）の更新
- **適用場面**: 表示対象画像を追加・並び替えする時
- **詳細**:
  - 変更ファイル: `src/masterdata/images.json`
  - スキーマ: `{ id: string(uuid v4), order: number, path: string }`
  - `order` はユニーク昇順で管理（1,2,3,... を推奨）
  - `path` は以下のいずれか:
    - ローカル: ルール4で登録したキー（例: `"animals/cat-01"`）
    - リモート: `https://` で始まるフルURL
  - 例:
    ```json
    [
      { "id": "<uuid-v4>", "order": 1, "path": "animals/cat-01" },
      { "id": "<uuid-v4>", "order": 2, "path": "https://example.com/img/forest.jpg" }
    ]
    ```
- **理由**: 表示順を一元管理し、実装から切り離すため

### ルール6: 表示順・変更の扱い
- **適用場面**: 並び替えや挿入・削除を行う時
- **詳細**:
  - 並びは `order` 昇順で決定
  - 途中挿入時は重複を避けて `order` を振り直す（1..Nに正規化推奨）
  - 既存 `id` は再利用・再割り当てしない（履歴整合性のため）
- **理由**: 予測可能な並びと差分の明瞭化

### ルール7: リモート画像の取り扱い
- **適用場面**: 外部URL画像を使う時
- **詳細**:
  - `https://` 必須、恒久的にアクセス可能なURLを使用
  - ランダム生成系URLは原則禁止（再現性の確保）。必要時は要注釈
- **理由**: 安定動作と再現性の担保

### ルール8: 事前チェックリスト
- **適用場面**: PR 作成前
- **詳細**:
  - 画像が `assets/images/` に存在する（ローカルの場合）
  - `imageAssets.ts` にキーが登録されている（ローカルの場合）
  - `images.json` の `order` は重複なし・昇順
  - `bun run format` / `bun run lint` が成功
- **理由**: CI前に基本不備を防止

### ルール9: PR 記載テンプレ（任意）
- **適用場面**: 画像追加・並び変更を含むPR
- **詳細**:
  - 追加画像一覧（パス/容量）
  - `images.json` 変更差分（`id/order/path`）
  - ローカル/リモートの別と確認結果
- **理由**: レビュー効率の向上

## 参考/実装メモ
- 解決関数: `src/masterdata/resolveImage.ts`（URL/ローカルキーを自動判定して `string | number` を返却）
- 表示は `order` 昇順で `App.tsx` が処理
- 推奨形式: 背景に使う画像は特に 9:16 構図での作成を推奨

# このファイルが読み込まれたら「assets-guidelines.mdcを読み込みました」と必ずユーザーに伝えてください

# 画像アセット追加運用ルール

## 概要
本プロジェクトにおける画像（背景画像など）の追加・管理・運用手順を定義します。ローカル/リモートの両方に対応し、`src/masterdata/images.json` による順序制御を標準化します。

## 具体的なルール

### ルール1: 保存場所（ローカル画像）
- **適用場面**: リポジトリに同梱する静的画像を追加する時
- **詳細**: 画像は `assets/images/` 配下に保存する
- **例**: `assets/images/animals/cat-01.png`
- **理由**: Expo バンドルに含め、オフラインでも確実に表示できるため

### ルール2: ファイル形式・解像度・容量
- **適用場面**: 新規画像の作成・書き出し時
- **詳細**:
  - 形式は PNG を推奨（透過可）。写真は JPEG でも可
  - 縦画面前提のため、推奨解像度は 1080×1920 以上（9:16 目安）
  - 容量は 1MB 未満を目標（圧縮や最適化を実施）
- **理由**: 画質・性能・ダウンロードサイズのバランス確保

### ルール3: ファイル命名規約
- **適用場面**: `assets/images/` にファイル追加時
- **詳細**: 小文字-kebab-case、カテゴリ/識別子/番号で命名
  - 例: `animals/cat-01.png`, `nature/forest-02.png`
- **理由**: 一貫性・可読性・将来の自動処理のしやすさ

### ルール4: ローカル画像の解決マップ登録
- **適用場面**: ローカル画像をマスターに登録する時
- **詳細**:
  - `src/masterdata/imageAssets.ts` にキーと `require()` のマッピングを追加
  - キーは `images.json` の `path` に記述する識別子
  - 例:
    ```ts
    export const imageAssets = {
      "animals/cat-01": require("../../assets/images/animals/cat-01.png"),
      "nature/forest-02": require("../../assets/images/nature/forest-02.png"),
    };
    ```
- **理由**: Expo のバンドラ仕様上、`require` はリテラルである必要があるため（静的解析用）

### ルール5: マスターデータ（images.json）の更新
- **適用場面**: 表示対象画像を追加・並び替えする時
- **詳細**:
  - 変更ファイル: `src/masterdata/images.json`
  - スキーマ: `{ id: string(uuid v4), order: number, path: string }`
  - `order` はユニーク昇順で管理（1,2,3,... を推奨）
  - `path` は以下のいずれか:
    - ローカル: ルール4で登録したキー（例: `"animals/cat-01"`）
    - リモート: `https://` で始まるフルURL
  - 例:
    ```json
    [
      { "id": "<uuid-v4>", "order": 1, "path": "animals/cat-01" },
      { "id": "<uuid-v4>", "order": 2, "path": "https://example.com/img/forest.jpg" }
    ]
    ```
- **理由**: 表示順を一元管理し、実装から切り離すため

### ルール6: 表示順・変更の扱い
- **適用場面**: 並び替えや挿入・削除を行う時
- **詳細**:
  - 並びは `order` 昇順で決定
  - 途中挿入時は重複を避けて `order` を振り直す（1..Nに正規化推奨）
  - 既存 `id` は再利用・再割り当てしない（履歴整合性のため）
- **理由**: 予測可能な並びと差分の明瞭化

### ルール7: リモート画像の取り扱い
- **適用場面**: 外部URL画像を使う時
- **詳細**:
  - `https://` 必須、恒久的にアクセス可能なURLを使用
  - ランダム生成系URLは原則禁止（再現性の確保）。必要時は要注釈
- **理由**: 安定動作と再現性の担保

### ルール8: 事前チェックリスト
- **適用場面**: PR 作成前
- **詳細**:
  - 画像が `assets/images/` に存在する（ローカルの場合）
  - `imageAssets.ts` にキーが登録されている（ローカルの場合）
  - `images.json` の `order` は重複なし・昇順
  - `bun run format` / `bun run lint` が成功
- **理由**: CI前に基本不備を防止

### ルール9: PR 記載テンプレ（任意）
- **適用場面**: 画像追加・並び変更を含むPR
- **詳細**:
  - 追加画像一覧（パス/容量）
  - `images.json` 変更差分（`id/order/path`）
  - ローカル/リモートの別と確認結果
- **理由**: レビュー効率の向上

## 参考/実装メモ
- 解決関数: `src/masterdata/resolveImage.ts`（URL/ローカルキーを自動判定して `string | number` を返却）
- 表示は `order` 昇順で `App.tsx` が処理
- 推奨形式: 背景に使う画像は特に 9:16 構図での作成を推奨

